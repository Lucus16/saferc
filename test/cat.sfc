# Declare a type without a definition. This type can only be used through
# pointers.
type FILE;

fn malloc(size: usize): nullable *[size]byte;
fn free(ptr: nullable *[]byte);

# Note that libc does not require src to be null terminated, merely that any
# non-base-digit occurs before the end of its valid range. In SaferC, it's
# common to err on the safe side. Note also that this function is marked pure
# which allows the compiler to call it multiple times or not at all if
# convenient.
pure fn atoi(src: *[:0]const byte): int;

fn fopen(pathname: *[:0]const byte, mode: *const byte): nullable *FILE;
fn fread( buf: *[num]writeonly [size]byte, size: usize, num: usize, stream: *FILE): usize;
#        where result <= num
#        initializes buf[0..result];
fn fwrite(buf: *[num]const [size]byte, size: usize, num: usize, stream: *FILE): usize;
#        where result <= num;
fn fclose(stream: *FILE): int;
fn feof(stream: *FILE): int;
fn ferror(stream: *FILE): int;

var stdout: *FILE;
var errno: int;

fn main(argc: int, argv: *[argc]*[:0]byte): int {
        if argc < 2 {
                return 1;
        }
        let src = fopen(argv[1], "r");
        if !src {
                return 1;
        }
        var buf_size: usize = 0x1000;
        if argc > 2 {
                errno = 0;
                let buf_size_int = atoi(argv[2]);
                if errno {
                        return errno;
                } else if buf_size_int < 1 {
                        return 1;
                } else if cast_to_usize(&buf_size, buf_size_int) {
                        return 1;
                }
        }

        let buf = malloc(buf_size);
        if !buf {
                return 1;
        }

        # Static analysis should be able to prove that buf is not initialized
        # by malloc and may be partially initialized by fread but only the
        # initialized parts will be accessed by fwrite.
        while not feof(src) {
                var nread = fread(buf, 1, buf_size, src);
                if ferror(src) {
                        return 1;
                }
                fwrite(buf, 1, nread, stdout);
                if ferror(stdout) {
                        return 1;
                }
        }
        free(buf);
        if fclose(src) {
                return errno;
        }
        return 0;
}
