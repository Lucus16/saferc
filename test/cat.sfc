# Declare a type without a definition. This type can only be used through
# pointers.
type FILE;

# uninit implies mutable
fn malloc(size: usize): ?*uninit [size]byte;
# free doesn't care if your memory is uninitialized.
fn free(ptr: ?*uninit []byte);

# Note that libc does not require src to be null terminated, merely that any
# non-base-digit occurs before the end of its valid range. In SaferC, it's
# common to err on the safe side. Note also that this function is marked pure
# which allows the compiler to call it multiple times or not at all if
# convenient.
pure fn atoi(src: &[:0]byte): int;

fn fopen(pathname: &[:0]byte, mode: &[:0]byte): ?*mut FILE;
# the buffer passed to read *may* be uninitialized. The file is not modified but
# the FILE struct is.
fn fread( buf: &uninit [num][size]byte, size: usize, num: usize, stream: &mut FILE): usize;
#        promises result <= num
#        promises initialized buf[0..result];
fn fwrite(buf: &[num][size]byte, size: usize, num: usize, stream: &mut FILE): usize;
#        promises result <= num;
fn fclose(stream: *mut FILE): int;
pure fn feof(stream: &FILE): int;
pure fn ferror(stream: &FILE): int;

var stdout: *mut FILE;
var errno: int;

fn main(argc: int, argv: *[argc]*[:0]byte): int {
        # indices that cannot be statically proven to be in an array must have
        # an or else clause. An or else clause acts on failure.
        let path = argv[1] or else return 1;
        # or clauses match zero in nullable pointers, integers and booleans.
        # src is proven not null because the null case returns.
        let src = fopen(path, "r") or return 1;
        # exit if the cast to usize fails or if the result is zero.
        let buf_size = usize(atoi(argv[2] or else "4096"))
                or else return 1 or return 1;
        let buf = malloc(buf_size) or return 1;
        # Static analysis should be able to prove that buf is not initialized
        # by malloc and may be partially initialized by fread but only the
        # initialized parts will be accessed by fwrite.
        while not feof(src) {
                let nread = fread(buf, 1, buf_size, src);
                result = ferror(src);
                if result return;
                fwrite(buf, 1, nread, stdout);
                result = ferror(src);
                if result return;
        }
        free(buf);
        if fclose(src) return errno;
        return 0;
}
